<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Castiel Blog]]></title>
  <link href="http://superzhang.github.com/atom.xml" rel="self"/>
  <link href="http://superzhang.github.com/"/>
  <updated>2013-02-25T19:36:18+08:00</updated>
  <id>http://superzhang.github.com/</id>
  <author>
    <name><![CDATA[Castiel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ios 系统目录描述]]></title>
    <link href="http://superzhang.github.com/blog/2013/02/25/ios-systme-directory/"/>
    <updated>2013-02-25T14:50:00+08:00</updated>
    <id>http://superzhang.github.com/blog/2013/02/25/ios-systme-directory</id>
    <content type="html"><![CDATA[<br>1、【/Applications】


<br>常用软件的安装目录 内建软体及JB软体存放位置


<br>2、 【/private /var/ mobile/Media /iphone video Recorder】


<br>录像文件存放目录


<br>3、【/private /var/ mobile/Media /DCIM】


<br>相机拍摄的照片文件存放目录


<br>4、【/private/var/ mobile /Media/iTunes_Control/Music】


<br>iTunes上传的多媒体文件（例如MP3、MP4等）存放目录，文件没有被修改，但是文件名字被修改了，直接下载到电脑即可读取。


<br>5、【/private /var/root/Media/EBooks】


<br>电子书存放目录 这一项iOS4应该不需要了!


<br>6、【/Library/Ringtones】


<br>系统自带的来电铃声存放目录（用iTunes将文件转换为ACC文件，把后缀名改成.m4r,用iPhone_PC_Suite传到/Library/Ringtones即可）


<br>7、【/private/var/ mobile /Library/AddressBook】


<br>系统电话本的存放目录。


<br>8、【/private /var/ mobile/Media /iphone Recorder】


<br>录音文件存放目录


<br>9、【/Applications/Preferences.app/zh_CN.lproj】    【/Applications/Preferences.app/zh_TW.lproj】    <br> 软件 Preferences.app的中文汉化文件存放目录


<br>10、【/Library/Wallpaper】


<br>系统牆纸的存放目录


<br>11、【/System/Library/Audio/UISounds】


<br>系统声音文件的存放目录


<br>12、【/private/var/root/Media/PXL】


<br>ibrickr上传安装程序建立的一个数据库，估计和 windows的uninstall记录差不多。


<br>13、【/bin】


<br>和linux系统差不多，是系统执行指令的存放目录。


<br>14、【/private/var/ mobile /Library/SMS】


<br>系统短信的存放目录


<br>15、【/private/var/run】


<br>系统进程运行的临时目录？ （查看这裡可以看到系统启动的所有进程）


<br>16、【/private/var/logs/CrashReporter】


<br>系统错误记录报告、


<br>17.这个电池图标存放


<br>使用Winterboard的朋友，在自用的主题目录下，/var/stash/Themes.xxxxx /自用主题目录/Bundles/com.apple.springboard/目录内上传BatteryBG_1-17.png图片即可，如无com. apple.springboard目录，请自建。 （Themes.xxxxx每个人都是不一样的，故用xxxxx表示）


<p>不用的也可以直接替换/System/Library/CoreServices/SpringBoard.app
图标替换路径
WB相关主题
直接放在Library/Themes裡面</p>

<br>注意修改权限


<br>18、充电图标：


<br>System/Library/CoreServices/SpringBoard.app/BatteryBG_1.png  


<p> <br>一直到BatteryBG_17.png ，Batteryfill.png   18个图标为充电图标 </p>

<br>19、手机信号图标：


<p>\System \Library\CoreServices\SpringBoard.app\下Default_0_Bars.png  
一直到Default_5_Bars.png 和  FSO_0_Bars.png–FSO_5_Bars.png   10个图标为信号图标 </p>

<br>20、 Wifi信号图标:


<br>\System\Library\CoreServices\SpringBoard.app \Default_0_AirPort.png—Default_3_AirPort.png  


<p>和  FSO_0_AirPort.png— FSO_3_AirPort.png   </p>

<br>8个图标为wifi信号图标 


<br>21、Edge信号图标:


<br>\System\Library\CoreServices\SpringBoard.app\ Default_EDGE_ON.png和FSO_EDGE_ON.png   


<p>2图标为Edge信号图标 </p>

<br>22、日期美化图标：


<br>\System\Library\CoreServices\SpringBoard.app|FSO_LockIcon.png 


<br>23、待机播放器图标：


<br>\System\Library\CoreServices\SpringBoard.app|nexttrack.png , pause.png , play.png, prevtrack.png   


<br>4个图标为待机播放器图标 


<br>24、IPOD播放信号


<br>\System\Library\CoreServices\SpringBoard.app\FSO_Play.png ,Default_Play.png 


<br>25、闹钟信号


<br>\System\Library\CoreServices\SpringBoard.app\Default_AlarmClock.png ,FSO_AlarmClock.png 


<br>26、震动图标


<br>\System\Library\CoreServices\SpringBoard.app\silent.png ,hud.png ,ring.png 


<br>27、滑块图标：


<br>\System\Library\PrivateFrameworks\TelephonyUI.framework 目录下  


<br>Bottombarknobgray.png（待机解锁滑块图标）  


<br>bottombarknobgreen.png（待机状态下移动滑动来接听滑块图标)  


<br>Bottombarknobred.png(关机滑块 图标） 


<br>28、待机时间字体：


<br>/System/Library/Fonts/Cache/LockClock.ttf 


<br>29、待机时间背景：


<br>system/library/Frameworks/UIKit.framework/Other.artwork 


<br>30、滑块文字变为闪光字:


<br>\System\Library\PrivateFrameworks\TelephonyUI.framework/bottombarlocktextmask.png 


<br>32、解锁滑条路径:


<br>\System\Library\PrivateFrameworks\TelephonyUI.framework/\topbarbkgnd.png ,bottombarbkgndlock.png 


<br>33、 修复系统菜单


<br>删除文件  


<br>/private/var/mobile/Library/Caches /com.apple.mobile.installation.plist，  


<br>然后重新启动iPhone 


<br>34、运营商名称


<br>移动：改彩色的文件名为：Default_CARRIER_CHINAMOBILE.png


<br>改黑白的文件名为：FSO_CARRIER_CHINAMOBILE.png


<br>联通：改彩色的文件名为：Default_CARRIER_CHINAUNICOM.png


<br>改黑白的文件名为：FSO_CARRIER_CHINAUNICOM.png



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.net微信公众平台接口代码]]></title>
    <link href="http://superzhang.github.com/blog/2013/02/23/test/"/>
    <updated>2013-02-23T12:33:00+08:00</updated>
    <id>http://superzhang.github.com/blog/2013/02/23/test</id>
    <content type="html"><![CDATA[<p>using System;
using System.Configuration;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Xml.Linq;
using System.IO;
using System.Xml;
using System.Text;
using System.Data.SqlClient;
using System.Data;</p>

<p>namespace Web.UI
{</p>

<pre><code>public partial class Weixin : System.Web.UI.Page
{
    const string Token = "token";       //你的token
    protected string strJson = "";
    protected string DefaultOrganise;
    Lib.SqlHelper sqlHelper = new Lib.SqlHelper();
    string Connectionstring = @"Data Source=192.100.60.122;Initial catalog=appdevtestdb;UID=sa;pwd=ZBJT0049admin;";//替换
    protected void Page_Load(object sender, EventArgs e)
    {
        string postStr = "";
       // Valid();                        //验证通过后可删除此行代码
        if (Request.HttpMethod.ToLower() == "post")
        {
            Stream s = System.Web.HttpContext.Current.Request.InputStream;
            byte[] b = new byte[s.Length];
            s.Read(b, 0, (int)s.Length);
            postStr = Encoding.UTF8.GetString(b);
            if (!string.IsNullOrEmpty(postStr))
            {
                ResponseMsg(postStr);

            }

        }
    }

    /// &lt;summary&gt;
    /// 返回信息结果(微信信息返回)
    /// &lt;/summary&gt;
    /// &lt;param name="weixinXML"&gt;&lt;/param&gt;
    private void ResponseMsg(string weixinXML)
    {
        //回复消息的部分:你的代码写在这里
        XmlDocument doc = new XmlDocument();
        doc.LoadXml(weixinXML);
        XmlNodeList list = doc.GetElementsByTagName("xml");
        XmlNode xn = list[0];
        string FromUserName = xn.SelectSingleNode("//FromUserName").InnerText;
        string ToUserName = xn.SelectSingleNode("//ToUserName").InnerText;
        string content = "";
        content = xn.SelectSingleNode("//Content").InnerText;
        //string content = "";// doc.GetElementsByTagName("content").Item(0).ToString();

        if (content.Equals("Hello2BizUser"))
        {
            content = "欢迎关注!";
        }

        else 
        {

            content = "现在是北京时间：" + string.Format("{0:f}", DateTime.Now);
        }
        string strresponse = "&lt;xml&gt;";
        strresponse = strresponse + "&lt;ToUserName&gt;&lt;![CDATA[" + FromUserName + "]]&gt;&lt;/ToUserName&gt;";
        strresponse = strresponse + "&lt;FromUserName&gt;&lt;![CDATA[" + ToUserName + "]]&gt;&lt;/FromUserName&gt;";
        strresponse = strresponse + "&lt;CreateTime&gt;" + DateTime.Now.Ticks.ToString() + "&lt;/CreateTime&gt;";
        strresponse = strresponse + "&lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;";
        strresponse = strresponse + "&lt;Content&gt;&lt;![CDATA[" + content + "]]&gt;&lt;/Content&gt;";
        strresponse = strresponse + "&lt;FuncFlag&gt;0&lt;FuncFlag&gt;";
        strresponse = strresponse + "&lt;/xml&gt;";
        WriteLog("postStr:" + content);
        Response.Write(strresponse);
    }
    /// &lt;summary&gt;
          /// &lt;summary&gt;
    /// 写日志(用于跟踪)
    /// &lt;/summary&gt;
    private void WriteLog(string strMemo)
    {
        if (!Directory.Exists(Server.MapPath(@"logs\")))
        {
            Directory.CreateDirectory(Server.MapPath(@"logs\"));
        }
        string filename = Server.MapPath(@"logs/log.txt");
        StreamWriter sr = null;
        try
        {
            if (!File.Exists(filename))
            {
                sr = File.CreateText(filename);
            }
            else
            {
                sr = File.AppendText(filename);
            }
            sr.WriteLine(strMemo);
        }
        catch
        {
        }
        finally
        {
            if (sr != null)
                sr.Close();
        }
    }

    /// &lt;summary&gt;
    /// 验证微信签名
    /// &lt;/summary&gt;
    /// * 将token、timestamp、nonce三个参数进行字典序排序
    /// * 将三个参数字符串拼接成一个字符串进行sha1加密
    /// * 开发者获得加密后的字符串可与signature对比，标识该请求来源于微信。
    /// &lt;returns&gt;&lt;/returns&gt;
    private bool CheckSignature()
    {
        string signature = Request.QueryString["signature"].ToString();
        string timestamp = Request.QueryString["timestamp"].ToString();
        string nonce = Request.QueryString["nonce"].ToString();
        string[] ArrTmp = { Token, timestamp, nonce };
        Array.Sort(ArrTmp);     //字典排序
        string tmpStr = string.Join("", ArrTmp);
        tmpStr = FormsAuthentication.HashPasswordForStoringInConfigFile(tmpStr, "SHA1");
        tmpStr = tmpStr.ToLower();
        if (tmpStr.Equals(signature))
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    /// &lt;summary&gt;
    /// 验证
    /// &lt;/summary&gt;
    private void Valid()
    {
        string echoStr = Request.QueryString["echoStr"].ToString();
        if (CheckSignature())
        {
            if (!string.IsNullOrEmpty(echoStr))
            {
                Response.Write(echoStr);
                Response.End();
            }
        }
    }
}
</code></pre>

<p>}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[github+octopress+vim--像黑客一样写博客（1）]]></title>
    <link href="http://superzhang.github.com/blog/2013/02/19/zhong-wen-ce-shi/"/>
    <updated>2013-02-19T18:06:00+08:00</updated>
    <id>http://superzhang.github.com/blog/2013/02/19/zhong-wen-ce-shi</id>
    <content type="html"><![CDATA[<p>年前闲来没事，就在github上尝试搭建了下博客，然后发现了octopress，最早接触博客是在新浪。后来不再满足，然后尝试了自己的个人站点，配合wordpress。因为，虚拟空间的费用等问题，一年左右就搁浅了。今天我就介绍下怎么在github上搭建博客，因为网上已有很多教程，但是我在搭建中遇到很多问题，所以，我根据自己的对别人的文章进行了一些修改。</p>

<p>首先你要拥有个人github账号
具体怎么申请和配置，可以在www.github.com上自己看。</p>

<p>登陆github，创建一个个人账号。假设叫做：rubyonchina。</p>

<p>然后回到ubuntu或者Mac里面，仍然是在终端里面，输入：</p>

<p> [[ -f ~/.ssh/id_rsa.pub ]] || ssh-keygen -t rsa
按照默认提示一路确认，生成密钥之后，将生成的信息复制到github页面中，如下所示：</p>

<p> [[ -f ~/.ssh/id_rsa.pub ]] &amp;&amp; cat ~/.ssh/id_rsa.pub | xclip
然后在浏览器中打开页面：</p>

<p>https://github.com/account/ssh</p>

<p>点击，Add another public key，粘贴前面步骤复制的信息，请格外注意，不要在Title中填写内容，直接将复制的内容粘贴到Key中，然后点击：Add Key即可。</p>

<p>配置octopress个人博客</p>

<p>cd ~/dev/
git clone git://github.com/imathis/octopress.git rubyonchina.github.com
cd ~/dev/rubyonchina.github.com
修改默认的.rvmrc文件的内容为：</p>

<p>rvm use 1.9.2@rails31
安装相应的gem:</p>

<p>bundle update
然后生成模版文件：</p>

<p>rake install
分发到github上。分发之前，假设你已经注册用户名为rubyonchina的github.com账号，已经创建名为rubyonchina.github.com项目。</p>

<p>cd ~/dev/rubyonchina.github.com
git remote add rubyonchina git@github.com:rubyonchina/rubyonchina.github.com.git
新增一篇测试博客：</p>

<p>rake new_post[&#8220;post title&#8221;]
生成静态站点：</p>

<p>rake generate
配置octopress与github的连接：</p>

<p>rake setup_github_pages
按照提示填入你的github项目网址，比如，本示例是：</p>

<p>git@github.com:rubyonchina/rubyonchina.github.com.git
分发到github上：</p>

<p>rake deploy
第一次运行时，会询问是否建立对github的授权，输入：yes。然后将站点更新的内容推送到github上。</p>

<p>git push -u rubyonchina master
尝试浏览，</p>

<p>http://rubyonchina.github.com</p>

<p>OK！成功！然后，此时，再创建一个新的github的source分支，用于保存写作的md源文件等。</p>

<p>git add .
git commit -m &#8220;some changes&#8221;
git push rubyonchina source
现在，你就拥有了一个强大的个人站点。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[正式安家]]></title>
    <link href="http://superzhang.github.com/blog/2013/02/05/hello-ruby/"/>
    <updated>2013-02-05T17:19:00+08:00</updated>
    <id>http://superzhang.github.com/blog/2013/02/05/hello-ruby</id>
    <content type="html"><![CDATA[<p>过年期间，由于闲的蛋疼，开始各种折腾，很早看到有人在github上搭建博客，然后就开始各种尝试,终于经过不懈的努力，弄好了。感觉像搬新家一样的兴奋。我会在这里给大家分享技术，生活，各种事情。</p>
]]></content>
  </entry>
  
</feed>
